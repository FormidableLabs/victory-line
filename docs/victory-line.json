{"description":"","props":{"animate":{"type":{"name":"object"},"required":false,"description":"The animate prop specifies props for victory-animation to use. It this prop is\nnot given, the line will not tween between changing data / style props.\nLarge datasets might animate slowly due to the inherent limits of svg rendering.\n@examples {velocity: 0.02, onEnd: () => alert(\"done!\")}"},"data":{"type":{"name":"arrayOf","value":{"name":"shape","value":{"x":{"name":"any","required":false},"y":{"name":"any","required":false}}}},"required":false,"description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points where each data point should be an object with x and y properties.\n@examples [{x: 1, y: 12}, {x: 10, y: 25}, {x: 100, y: 34}]"},"domain":{"type":{"name":"union","value":[{"name":"custom","raw":"Util.PropTypes.domain"},{"name":"shape","value":{"x":{"name":"custom","raw":"Util.PropTypes.domain","required":false},"y":{"name":"custom","raw":"Util.PropTypes.domain","required":false}}}]},"required":false,"description":"The domain prop describes the range of values your chart will include. This prop can be\ngiven as a array of the minimum and maximum expected values for your chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n@examples [-1, 1], {x: [0, 100], y: [0, 1]}"},"height":{"type":{"name":"custom","raw":"Util.PropTypes.nonNegative"},"required":false,"description":"The height props specifies the height of the chart container element in pixels","defaultValue":{"value":"300","computed":false}},"interpolation":{"type":{"name":"enum","value":[{"value":"\"linear\"","computed":false},{"value":"\"linear-closed\"","computed":false},{"value":"\"step\"","computed":false},{"value":"\"step-before\"","computed":false},{"value":"\"step-after\"","computed":false},{"value":"\"basis\"","computed":false},{"value":"\"basis-open\"","computed":false},{"value":"\"basis-closed\"","computed":false},{"value":"\"bundle\"","computed":false},{"value":"\"cardinal\"","computed":false},{"value":"\"cardinal-open\"","computed":false},{"value":"\"cardinal-closed\"","computed":false},{"value":"\"monotone\"","computed":false}]},"required":false,"description":"The interpolation prop determines how data points should be connected\nwhen plotting a line","defaultValue":{"value":"\"linear\"","computed":false}},"label":{"type":{"name":"string"},"required":false,"description":"The label prop specifies a label to display at the end of a line component"},"labelComponent":{"type":{"name":"element"},"required":false,"description":"The labelComponent prop takes in an entire, HTML-complete label component\nwhich will be used to create labels for line to use"},"padding":{"type":{"name":"union","value":[{"name":"number"},{"name":"shape","value":{"top":{"name":"number","required":false},"bottom":{"name":"number","required":false},"left":{"name":"number","required":false},"right":{"name":"number","required":false}}}]},"required":false,"description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right.","defaultValue":{"value":"50","computed":false}},"samples":{"type":{"name":"custom","raw":"Util.PropTypes.nonNegative"},"required":false,"description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead.","defaultValue":{"value":"50","computed":false}},"scale":{"type":{"name":"union","value":[{"name":"custom","raw":"Util.PropTypes.scale"},{"name":"shape","value":{"x":{"name":"custom","raw":"Util.PropTypes.scale","required":false},"y":{"name":"custom","raw":"Util.PropTypes.scale","required":false}}}]},"required":false,"description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a function, or as an object that specifies separate functions for x and y.\n@examples d3.time.scale(), {x: d3.scale.linear(), y: d3.scale.log()}","defaultValue":{"value":"d3.scale.linear()","computed":true}},"standalone":{"type":{"name":"bool"},"required":false,"description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose VictoryLine with other components within an enclosing <svg> tag.","defaultValue":{"value":"true","computed":false}},"style":{"type":{"name":"shape","value":{"parent":{"name":"object","required":false},"data":{"name":"object","required":false},"labels":{"name":"object","required":false}}},"required":false,"description":"The style prop specifies styles for your chart. VictoryLine relies on Radium,\nso valid Radium style objects should work for this prop, however height, width, and margin\nare used to calculate range, and need to be expressed as a number of pixels\n@examples {data: {stroke: \"red\"}, labels: {fontSize: 14}}"},"width":{"type":{"name":"custom","raw":"Util.PropTypes.nonNegative"},"required":false,"description":"The width props specifies the width of the chart container element in pixels","defaultValue":{"value":"450","computed":false}},"x":{"type":{"name":"custom","raw":"Util.PropTypes.homogeneousArray"},"required":false,"description":"The x prop provides another way to supply data for line to plot. This prop can be given\nas an array of values, and it will be plotted against whatever y prop is provided. If no\nprops are provided for y, the values in x will be plotted as the identity function (x) => x.\n@examples [1, 2, 3]"},"y":{"type":{"name":"union","value":[{"name":"array"},{"name":"func"}]},"required":false,"description":"The y prop provides another way to supply data for line to plot. This prop can be given\nas a function of x, or an array of values. If x props are given, they will be used\nin plotting (x, y) data points. If x props are not provided, a set of x values\nevenly spaced across the x domain will be calculated, and used for plotting data points.\n@examples (x) => Math.sin(x), [1, 2, 3]","defaultValue":{"value":"(x) => x","computed":false}}}}