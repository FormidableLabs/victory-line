{"description":"","props":{"style":{"type":{"name":"object"},"required":false,"description":"The style prop specifies styles for your chart. VictoryLine relies on Radium,\nso valid Radium style objects should work for this prop, however height, width, and margin\nare used to calculate range, and need to be expressed as a number of pixels\n@example {width: 300, margin: 50, data: {stroke: \"red\", opacity, 0.8}}"},"data":{"type":{"name":"arrayOf","value":{"name":"shape","value":{"x":{"name":"any","required":false},"y":{"name":"any","required":false}}}},"required":false,"description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points where each data point should be an object with x and y properties.\n@exampes [\n  {x: 1, y: 125},\n  {x: 10, y: 257},\n  {x: 100, y: 345},\n]"},"x":{"type":{"name":"array"},"required":false,"description":"The x props provides another way to supply data for line to plot. This prop can be given\nas an array of values, and it will be plotted against whatever y prop is provided. If no\nprops are provided for y, the values in x will be plotted as the identity function (x) => x.\n@examples [1, 2, 3]"},"y":{"type":{"name":"union","value":[{"name":"array"},{"name":"func"}]},"required":false,"description":"The y props provides another way to supply data for line to plot. This prop can be given\nas a function of x, or an array of values. If x props are given, they will be used\nin plotting (x, y) data points. If x props are not provided, a set of x values\nevenly spaced across the x domain will be calculated, and used for plotting data points.\n@examples (x) => Math.sin(x), [1, 2, 3]","defaultValue":{"value":"(x) => x","computed":false}},"domain":{"type":{"name":"union","value":[{"name":"array"},{"name":"shape","value":{"x":{"name":"array","required":false},"y":{"name":"array","required":false}}}]},"required":false,"description":"The domain prop describes the range of values your chart will include. This prop can be\ngiven as a array of the minimum and maximum expected values for your chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n@exampes [-1, 1], {x: [0, 100], y: [0, 1]}"},"range":{"type":{"name":"union","value":[{"name":"array"},{"name":"shape","value":{"x":{"name":"array","required":false},"y":{"name":"array","required":false}}}]},"required":false,"description":"The range prop describes the range of pixels your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a range will be calculated based on the height,\nwidth, and margin provided in the style prop, or in default styles. It is usually\na good idea to let the chart component calculate its own range.\n@exampes [0, 500], {x: [0, 500], y: [500, 300]}"},"scale":{"type":{"name":"union","value":[{"name":"func"},{"name":"shape","value":{"x":{"name":"func","required":false},"y":{"name":"func","required":false}}}]},"required":false,"description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a function, or as an object that specifies separate functions for x and y.\n@exampes d3.time.scale(), {x: d3.scale.linear(), y: d3.scale.log()}","defaultValue":{"value":"d3.scale.linear()","computed":true}},"samples":{"type":{"name":"number"},"required":false,"description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead.","defaultValue":{"value":"50","computed":false}},"interpolation":{"type":{"name":"enum","value":[{"value":"\"linear\"","computed":false},{"value":"\"linear-closed\"","computed":false},{"value":"\"step\"","computed":false},{"value":"\"step-before\"","computed":false},{"value":"\"step-after\"","computed":false},{"value":"\"basis\"","computed":false},{"value":"\"basis-open\"","computed":false},{"value":"\"basis-closed\"","computed":false},{"value":"\"bundle\"","computed":false},{"value":"\"cardinal\"","computed":false},{"value":"\"cardinal-open\"","computed":false},{"value":"\"cardinal-closed\"","computed":false},{"value":"\"monotone\"","computed":false}]},"required":false,"description":"The interpolation prop determines how data points should be connected\nwhen plotting a line","defaultValue":{"value":"\"linear\"","computed":false}},"animate":{"type":{"name":"object"},"required":false,"description":"The animate prop specifies props for victory-animation to use. It this prop is\nnot given, the line will not tween between changing data / style props.\nLarge datasets might animate slowly due to the inherent limits of svg rendering.\n@examples {line: {delay: 5, velocity: 10, onEnd: () => alert(\"woo!\")}}"},"standalone":{"type":{"name":"bool"},"required":false,"description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose VictoryLine with other components within an enclosing <svg> tag.","defaultValue":{"value":"true","computed":false}},"label":{"type":{"name":"string"},"required":false,"description":""}}}